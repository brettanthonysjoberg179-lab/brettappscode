# Infrastructure as Code (IaC) Deployment Template using Bicep

parameters:
  - name: serviceConnection
    type: string
  - name: resourceGroup
    type: string
  - name: location
    type: string
    default: 'eastus'
  - name: bicepFile
    type: string
    default: 'iac/bicep/main.bicep'
  - name: acrName
    type: string
  - name: appServiceName
    type: string
  - name: keyVaultName
    type: string
  - name: sqlServerName
    type: string
  - name: sqlDbName
    type: string
  - name: appInsightsName
    type: string

steps:
  # Install Azure CLI (if not already installed)
  - task: AzureCLI@2
    displayName: 'Verify Azure CLI Installation'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Azure CLI version:"
        az --version

  # Create Resource Group (if it doesn't exist)
  - task: AzureCLI@2
    displayName: 'Create Resource Group'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Creating or verifying resource group: ${{ parameters.resourceGroup }}"
        az group create --name ${{ parameters.resourceGroup }} --location ${{ parameters.location }}

  # Deploy Bicep template
  - task: AzureCLI@2
    displayName: 'Deploy Bicep Template'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Deploying Bicep template: ${{ parameters.bicepFile }}"
        
        # Deploy Bicep template with parameters
        az deployment group create \
          --resource-group ${{ parameters.resourceGroup }} \
          --template-file ${{ parameters.bicepFile }} \
          --parameters \
            acrName=${{ parameters.acrName }} \
            appServiceName=${{ parameters.appServiceName }} \
            keyVaultName=${{ parameters.keyVaultName }} \
            sqlServerName=${{ parameters.sqlServerName }} \
            sqlDatabaseName=${{ parameters.sqlDbName }} \
            appInsightsName=${{ parameters.appInsightsName }} \
            location=${{ parameters.location }} \
            sqlAdminPassword=$(SQL_ADMIN_PASSWORD)
        
        echo "Bicep deployment completed successfully"

  # Capture deployment outputs
  - task: AzureCLI@2
    displayName: 'Get Deployment Outputs'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Retrieving deployment outputs..."
        
        # Get ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name ${{ parameters.acrName }} --query loginServer -o tsv)
        echo "ACR Login Server: $ACR_LOGIN_SERVER"
        echo "##vso[task.setvariable variable=ACR_LOGIN_SERVER;isOutput=true]$ACR_LOGIN_SERVER"
        
        # Get App Service URL
        APP_URL=$(az webapp show --name ${{ parameters.appServiceName }} --resource-group ${{ parameters.resourceGroup }} --query defaultHostName -o tsv)
        echo "App Service URL: https://$APP_URL"
        echo "##vso[task.setvariable variable=APP_URL;isOutput=true]https://$APP_URL"
        
        # Get Key Vault URI
        KV_URI=$(az keyvault show --name ${{ parameters.keyVaultName }} --query properties.vaultUri -o tsv)
        echo "Key Vault URI: $KV_URI"
        echo "##vso[task.setvariable variable=KV_URI;isOutput=true]$KV_URI"

  # Configure App Service to use Managed Identity with Key Vault
  - task: AzureCLI@2
    displayName: 'Configure Managed Identity for App Service'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Enabling system-assigned managed identity for App Service..."
        az webapp identity assign --name ${{ parameters.appServiceName }} --resource-group ${{ parameters.resourceGroup }}
        
        # Get the managed identity principal ID
        PRINCIPAL_ID=$(az webapp identity show --name ${{ parameters.appServiceName }} --resource-group ${{ parameters.resourceGroup }} --query principalId -o tsv)
        echo "Managed Identity Principal ID: $PRINCIPAL_ID"
        
        # Grant Key Vault access to the managed identity
        echo "Granting Key Vault access to managed identity..."
        az keyvault set-policy --name ${{ parameters.keyVaultName }} \
          --object-id $PRINCIPAL_ID \
          --secret-permissions get list

  # Display deployment summary
  - script: |
      echo "=========================================="
      echo "Infrastructure Deployment Summary"
      echo "=========================================="
      echo "Resource Group: ${{ parameters.resourceGroup }}"
      echo "Location: ${{ parameters.location }}"
      echo "ACR Name: ${{ parameters.acrName }}"
      echo "App Service: ${{ parameters.appServiceName }}"
      echo "Key Vault: ${{ parameters.keyVaultName }}"
      echo "SQL Server: ${{ parameters.sqlServerName }}"
      echo "SQL Database: ${{ parameters.sqlDbName }}"
      echo "App Insights: ${{ parameters.appInsightsName }}"
      echo "=========================================="
    displayName: 'Display Deployment Summary'
