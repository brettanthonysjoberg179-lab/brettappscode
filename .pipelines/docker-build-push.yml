# Docker Build and Push Pipeline Template
# Builds Docker image and pushes to Azure Container Registry (ACR)

parameters:
  - name: azureServiceConnection
    type: string
  - name: acrName
    type: string
  - name: imageName
    type: string
    default: 'brettappscode'
  - name: imageTag
    type: string
    default: 'latest'
  - name: dockerfile
    type: string
    default: 'Dockerfile'

jobs:
  - job: DockerBuildPush
    displayName: 'Build and Push Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: 'login'
          containerRegistry: ${{ parameters.azureServiceConnection }}
          azureSubscriptionEndpoint: ${{ parameters.azureServiceConnection }}
          azureContainerRegistry: '${{ parameters.acrName }}.azurecr.io'

      - task: Docker@2
        displayName: 'Build Docker Image'
        inputs:
          command: 'build'
          repository: '${{ parameters.imageName }}'
          dockerfile: '${{ parameters.dockerfile }}'
          tags: |
            ${{ parameters.imageTag }}
            latest
          arguments: '--no-cache'

      - task: Docker@2
        displayName: 'Push Docker Image to ACR'
        inputs:
          command: 'push'
          containerRegistry: ${{ parameters.azureServiceConnection }}
          repository: '${{ parameters.imageName }}'
          tags: |
            ${{ parameters.imageTag }}
            latest

      - script: |
          echo "Docker image built and pushed successfully"
          echo "Image: ${{ parameters.acrName }}.azurecr.io/${{ parameters.imageName }}:${{ parameters.imageTag }}"
        displayName: 'Print Image Details'

      # Scan image for vulnerabilities (optional)
      - task: AzureCLI@2
        displayName: 'Scan Image for Vulnerabilities'
        inputs:
          azureSubscription: ${{ parameters.azureServiceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Security scanning image..."
            # Use Microsoft Defender for Cloud or Trivy for image scanning
            # az acr repository show-tags --name ${{ parameters.acrName }} --repository ${{ parameters.imageName }}
        continueOnError: true
