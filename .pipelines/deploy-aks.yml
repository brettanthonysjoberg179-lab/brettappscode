# Deploy to Azure Kubernetes Service (AKS) Template
parameters:
  - name: azureServiceConnection
    type: string
  - name: aksClusterName
    type: string
  - name: resourceGroupName
    type: string
  - name: acrLoginServer
    type: string
  - name: imageRepository
    type: string
  - name: imageTag
    type: string
  - name: namespace
    type: string
    default: 'default'

jobs:
  - deployment: DeployAKS
    displayName: 'Deploy to AKS'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production-aks'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              displayName: 'Get AKS Credentials'
              inputs:
                azureSubscription: ${{ parameters.azureServiceConnection }}
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  echo "Getting AKS credentials..."
                  az aks get-credentials \
                    --resource-group ${{ parameters.resourceGroupName }} \
                    --name ${{ parameters.aksClusterName }} \
                    --overwrite-existing

            - task: Kubernetes@1
              displayName: 'Create Namespace (if not exists)'
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: ${{ parameters.azureServiceConnection }}
                azureResourceGroup: ${{ parameters.resourceGroupName }}
                kubernetesCluster: ${{ parameters.aksClusterName }}
                command: 'apply'
                useConfigurationFile: false
                inline: |
                  apiVersion: v1
                  kind: Namespace
                  metadata:
                    name: ${{ parameters.namespace }}
                    labels:
                      name: ${{ parameters.namespace }}
              continueOnError: true

            - script: |
                cat <<EOF > deployment.yaml
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: brettappscode
                  namespace: ${{ parameters.namespace }}
                  labels:
                    app: brettappscode
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: brettappscode
                  template:
                    metadata:
                      labels:
                        app: brettappscode
                    spec:
                      containers:
                      - name: brettappscode
                        image: ${{ parameters.acrLoginServer }}/${{ parameters.imageRepository }}:${{ parameters.imageTag }}
                        ports:
                        - containerPort: 3000
                        env:
                        - name: PORT
                          value: "3000"
                        - name: NODE_ENV
                          value: "production"
                        resources:
                          requests:
                            memory: "256Mi"
                            cpu: "250m"
                          limits:
                            memory: "512Mi"
                            cpu: "500m"
                        livenessProbe:
                          httpGet:
                            path: /
                            port: 3000
                          initialDelaySeconds: 30
                          periodSeconds: 10
                        readinessProbe:
                          httpGet:
                            path: /
                            port: 3000
                          initialDelaySeconds: 10
                          periodSeconds: 5
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: brettappscode-service
                  namespace: ${{ parameters.namespace }}
                spec:
                  type: LoadBalancer
                  ports:
                  - port: 80
                    targetPort: 3000
                    protocol: TCP
                  selector:
                    app: brettappscode
                EOF
                
                echo "Kubernetes manifests created"
                cat deployment.yaml
              displayName: 'Create Kubernetes Manifests'

            - task: Kubernetes@1
              displayName: 'Deploy to AKS'
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: ${{ parameters.azureServiceConnection }}
                azureResourceGroup: ${{ parameters.resourceGroupName }}
                kubernetesCluster: ${{ parameters.aksClusterName }}
                namespace: ${{ parameters.namespace }}
                command: 'apply'
                useConfigurationFile: true
                configuration: 'deployment.yaml'

            - task: Kubernetes@1
              displayName: 'Get Service Details'
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: ${{ parameters.azureServiceConnection }}
                azureResourceGroup: ${{ parameters.resourceGroupName }}
                kubernetesCluster: ${{ parameters.aksClusterName }}
                namespace: ${{ parameters.namespace }}
                command: 'get'
                arguments: 'service brettappscode-service'

            - script: |
                echo "======================================"
                echo "AKS Deployment Summary"
                echo "======================================"
                echo "Cluster: ${{ parameters.aksClusterName }}"
                echo "Namespace: ${{ parameters.namespace }}"
                echo "Image: ${{ parameters.acrLoginServer }}/${{ parameters.imageRepository }}:${{ parameters.imageTag }}"
                echo "======================================"
                echo "To get the external IP, run:"
                echo "kubectl get service brettappscode-service -n ${{ parameters.namespace }}"
              displayName: 'Deployment Summary'
